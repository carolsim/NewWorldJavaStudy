/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-07-11 06:33:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class script_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div id=\"result\">쀼이이이잉이이ㅇㅇ</div>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t<hr/>\r\n");
      out.write("\t<!-- input영역에다가 이벤트함수로 값을 넣기 위해서는 -->\r\n");
      out.write("\t<input type=\"text\" name=\"id\" id=\"id\">\r\n");
      out.write("\t<hr/>\r\n");
      out.write("<!-- \t<img src=\"/img/shinsegae.png\">\r\n");
      out.write("\t<br/>\r\n");
      out.write("\t<img src=\"/img/woody.png\" width=\"400px\"> -->\r\n");
      out.write("\t<br/>\r\n");
      out.write("\t<button id=\"btn\">click</button>\r\n");
      out.write("\t<select id=\"imgSel\">\r\n");
      out.write("\t\t<option>shinsegae.png</option>\r\n");
      out.write("\t\t<option>woody.png</option>\r\n");
      out.write("\t</select>\r\n");
      out.write("\t\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<img id=\"imgSrc\">\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<hr/>\r\n");
      out.write("\t\r\n");
      out.write("\t<div id=\"makeForm\">\r\n");
      out.write("\t\t<img src=\"./img/plus-button.png\" id=\"imgBtn\" width=\"20px\">\r\n");
      out.write("\t\t<input type=\"text\">\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<hr/>\r\n");
      out.write("\t\r\n");
      out.write("\t<label>제조사</label>\r\n");
      out.write("\t<select class=\"maker\">\r\n");
      out.write("\t\t<option>benz</option>\r\n");
      out.write("\t\t<option>audi</option>\r\n");
      out.write("\t\t<option>bmw</option>\r\n");
      out.write("\t</select>\r\n");
      out.write("\t&nbsp;\r\n");
      out.write("\t<label>모델</label>\r\n");
      out.write("\t<select id=\"model\">\r\n");
      out.write("\t\t<option>선택하세요</option>\r\n");
      out.write("\t</select>\r\n");
      out.write("\t&nbsp;\r\n");
      out.write("\t<label>색깔</label>\r\n");
      out.write("\t<select id=\"color\">\r\n");
      out.write("\t\t<option>선택하세요</option>\r\n");
      out.write("\t</select>\r\n");
      out.write("\t\r\n");
      out.write("\t<hr/>\r\n");
      out.write("\t<label>선호하는 여행지를 선택하세요</label>\r\n");
      out.write("\t\t<li><input type=\"checkbox\" id=\"allchk\"><label>전체선택/해제</label></li>\r\n");
      out.write("\t<hr/>\r\n");
      out.write("\t<div id=\"area\">\r\n");
      out.write("\t\t<li><input type=\"checkbox\" id=\"box\" value=\"a\"><label>서울</label></li>\r\n");
      out.write("\t\t<li><input type=\"checkbox\" id=\"box\" value=\"b\"><label>동남아시아</label></li>\r\n");
      out.write("\t\t<li><input type=\"checkbox\" id=\"box\" value=\"c\"><label>동북아시아</label></li>\r\n");
      out.write("\t\t<li><input type=\"checkbox\" id=\"box\" value=\"d\"><label>유럽</label></li>\r\n");
      out.write("\t\t<li><input type=\"checkbox\" id=\"box\" value=\"e\"><label>미주</label></li>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t");
      out.write(" <!-- 이건 jsp 주석. 얘는 나중에 오픈해도 보이지 않음 -->\r\n");
      out.write("\t<!-- script -->\r\n");
      out.write("\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t/* 도큐먼트 객체는 html의 body를 가리킨다 */\r\n");
      out.write("\t\tfunction display(ary){\r\n");
      out.write("\t\t\ttxt=\"\";\r\n");
      out.write("\t\t\t$.each(ary,function(idx, data){\r\n");
      out.write("\t\t\t\ttxt += \"<option>\"+data+\"</option>\";\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t$(\"#model\").empty().append(txt);\r\n");
      out.write("\t\t\tconsole.log(\"display\");\r\n");
      out.write("\t\t\treturn ary;//리턴타입이 없지만 리턴을 할 수 있다.\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tfunction display2(ary){\r\n");
      out.write("\t\t\ttxt=\"\";\r\n");
      out.write("\t\t\t$.each(ary,function(idx, data){\r\n");
      out.write("\t\t\t\ttxt += \"<option>\"+data+\"</option>\";\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t$(\"#color\").empty().append(txt);\r\n");
      out.write("\t\t\tconsole.log(\"display2\");\r\n");
      out.write("\t\t\treturn ary;//리턴타입이 없지만 리턴을 할 수 있다.\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\t\tobj = {id:\"jisonic\", pwd:\"jisonic\"};//obj는 자바스크립트의 클래스가 되는거임\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tary=[\r\n");
      out.write("\t\t\t\t{id:\"jisonic\",pwd:\"jisonic\"},\r\n");
      out.write("\t\t\t\t{id:\"yangpa\",pwd:\"yangpa\"},\r\n");
      out.write("\t\t\t\t{id:\"river\",pwd:\"river\"},\r\n");
      out.write("\t\t\t\t{id:\"egay\",pwd:\"egay\"}\r\n");
      out.write("\t\t];\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tmapModel = {benz :['S500','E300','C200'],\r\n");
      out.write("\t\t\t\t\taudi :['A8','A6','A4'],\r\n");
      out.write("\t\t\t\t\tbmw  :['740d','520d','320d'] };\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tmapColor = {benz :['white','black','gray'],\r\n");
      out.write("\t\t\t\t\taudi :['blue','rgb','red'],\r\n");
      out.write("\t\t\t\t\tbmw  :['yellow','green','pink'] };\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//페이지 로드 이벤트. 페이지를 시작하는 거 자체가 로드 이벤트이다.\r\n");
      out.write("\t\t$(document).ready(function() {\r\n");
      out.write("\t\t\t/* \r\n");
      out.write("\t\t\t//$(\"#id\").val(\"jisonic\"); //value를 세팅\r\n");
      out.write("\t\t\t$(\"#id\").prop(\"value\",\"jisonic\"); //prop함수로 태그의 속성을 정의할수도 있다.\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t$(\"#btn\").click(function() {\r\n");
      out.write("\t\t\t\t//console.log(obj);\r\n");
      out.write("\t\t\t\t//$(\"#result\").text(obj.id+\" \"+obj.pwd);\r\n");
      out.write("\t\t\t\ttxt=\"\";\r\n");
      out.write("\t\t\t\t//$. <-이렇게 쓰겠다는 것은 제이쿼리의 함수를 그냥 쓰겠다는것임\r\n");
      out.write("\t\t\t\t$.each(ary,function(idx,obj){\r\n");
      out.write("\t\t\t\t\t//$(\"#result\").html(\"<h1>\"+obj.id+\" \"+obj.pwd+\"</h1>\"); 이거는 글짜가 바꿔치기됨\r\n");
      out.write("\t\t\t\t\t//$(\"#result\").append(\"<h1>\"+obj.id+\" \"+obj.pwd+\"</h1>\"); 누적됨\r\n");
      out.write("\t\t\t\t\ttxt += \"<H1>\"+obj.id+\" \"+obj.pwd+\"</H1>\";\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#result\").html(txt);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t\t\t */\r\n");
      out.write("\t\t\t\t$(\"#btn\").click(function() {\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#imgSel\").change(function(){\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t//window.alert($(this).val());\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t$(\"#imgSrc\").prop(\"src\",\"./img/\"+$(this).val());\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t//prototype의 객체지향언어기 때문에 function이 하나의 타입이 될 수 있다.\r\n");
      out.write("\t\t\t\t$(\"#imgBtn\").click(function(){\r\n");
      out.write("\t\t\t\t\t$(\"#makeForm\").append(\"<input type='text' id='',name='', value=''><br/>\");\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//one()<-이벤트를 딱 한번만 발생시키고 싶을때,on(),bind()\r\n");
      out.write("\t\t\t\t//$(\".maker\").bind(\"change\", )\r\n");
      out.write("\t\t\t\t$(\".maker\").change(function(){\r\n");
      out.write("\t\t\t\t\tmakerValue = $(this).val();\r\n");
      out.write("\t\t\t\t\tmodelAry = mapModel[makerValue]; //modelAry가 넘어옴\r\n");
      out.write("\t\t\t\t\tdisplay(modelAry);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t$(\".maker\").change(function(){\r\n");
      out.write("\t\t\t\t\tmakerValue = $(this).val();\r\n");
      out.write("\t\t\t\t\tcolorAry = mapColor[makerValue]; //modelAry가 넘어옴\r\n");
      out.write("\t\t\t\t\tdisplay2(colorAry);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t//전체선택 체크박스\r\n");
      out.write("/*  \t\t\t\t$(\"#allchk\").click(function(){\r\n");
      out.write("\t\t\t\t if($(\"#allchk\").prop(\"checked\")) { \r\n");
      out.write("\t\t\t\t\t $(\"#box\").prop(\"checked\",true);\r\n");
      out.write("\t\t\t\t\t }else{\r\n");
      out.write("\t\t\t\t\t\t $(\"#box\").prop(\"checked\",false);\r\n");
      out.write("\t\t\t\t\t }\r\n");
      out.write("\t\t\t\t });  */\r\n");
      out.write(" \t\t\t\t\r\n");
      out.write(" \t\t\t\t\r\n");
      out.write(" \t\t\t \t$(\"#allchk\").click(function(){\r\n");
      out.write("\t\t\t\t\tif(this.checked){\r\n");
      out.write("\t\t\t\t\t\t$(\"input[name='box']\").each(function(){\r\n");
      out.write("\t\t\t\t\t\t\t$(this).prop(\"checked\",true);\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t$(\"input[name='box']\").each(function(){\r\n");
      out.write("\t\t\t\t\t\t\t$(this).prop(\"checked\",false);\r\n");
      out.write("\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}); \r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t/////체크박스 역바인딩\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"input[name='box']:checkbox\").click(function(){\r\n");
      out.write("\t\t\t\t\tflag=true;\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t$(\"input[name='box']:checkbox\").each(function(){\r\n");
      out.write("\t\t\t\t\t\tif(this.checked==false) flag=false;\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\tif(flag){\r\n");
      out.write("\t\t\t\t\t\t$(\"#allchk\").prop(\"checked\", true);\r\n");
      out.write("\t\t\t\t\t}else{\r\n");
      out.write("\t\t\t\t\t\t$(\"#allchk\").prop(\"checked\", false);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t///////\r\n");
      out.write("\t\t\t\t \r\n");
      out.write("\r\n");
      out.write("\t\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
